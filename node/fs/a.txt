带上南昌米粉，煌上煌
// js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) // js 的后端node 用核心模块打理起服务器端开发
// 要读文件，先引入fs
const fs = require('fs');
//读一个文件 有几步？  js运行在服务器命令行上 找到文件 代码由CPU执行 会用到内存
// a.txt在磁盘文件里，IO操作 花时间找文件，打开文件，读取文件，输出到命令行之中
//耗时 callback 使用回调函数，回调是解决异步的良好防方案
fs.readFile('./a.txt','utf8',(err,data)=>{
    console.log(data);
}) 

fs.readFile('./b.txt','utf8',(err,data)=>{
    console.log(data);
}) 